Content-Length: 1041

{"params":{"workspaceFolders":[{"uri":"file:///home/ivan/faks/FactorizationSystems","name":"FactorizationSystems"}],"trace":"off","rootUri":"file:///home/ivan/faks/FactorizationSystems","processId":20652,"initializationOptions":{"hasWidgets":true,"editDelay":200},"clientInfo":{"version":"1.94.2","name":"Visual Studio Code"},"capabilities":{"workspace":{"workspaceEdit":{"resourceOperations":["create","rename","delete"],"documentChanges":true,"changeAnnotationSupport":{"groupsOnLabel":true}},"applyEdit":true},"window":{"showDocument":{"support":true}},"textDocument":{"completion":{"completionItem":{"insertReplaceSupport":true}},"codeAction":{"resolveSupport":{"properties":["edit"]},"isPreferredSupport":true,"honorsChangeAnnotations":false,"dynamicRegistration":true,"disabledSupport":true,"dataSupport":true,"codeActionLiteralSupport":{"codeActionKind":{"valueSet":["","quickfix","refactor","refactor.extract","refactor.inline","refactor.rewrite","source","source.organizeImports"]}}}}}},"method":"initialize","jsonrpc":"2.0","id":0}Content-Length: 5832

{"params":{"textDocument":{"version":1,"uri":"file:///home/ivan/faks/FactorizationSystems/FactorizationSystems/Basic.lean","text":"import Mathlib.CategoryTheory.Category.Basic\nimport Mathlib.CategoryTheory.Comma.Arrow\nimport Mathlib.CategoryTheory.Comma.Over\nimport Mathlib.CategoryTheory.Limits.Shapes.Terminal\nimport Mathlib.CategoryTheory.ClosedUnderIsomorphisms\nimport Mathlib.CategoryTheory.MorphismProperty.Composition\n\n-- set_option diagnostics true\n\nnamespace CategoryTheory\nuniverse u v u' v'\nvariable {C : Type u} [Category.{v} C] {D : Type u'} [Category.{v'} D]\n\ndef contains_isos (W : MorphismProperty C) : Prop :=\n  ∀ ⦃X Y : C⦄ (f : X ≅ Y) , W f.hom\n\nclass is_closed_comp (W : MorphismProperty C) extends W.Respects W where\n\nstructure FactorizationSystem (L R : MorphismProperty C) where\n  contains_isos_left_class : contains_isos L\n  contains_isos_right_class : contains_isos R\n  is_closed_comp_left_class : is_closed_comp L\n  is_closed_comp_right_class : is_closed_comp R\n  image  : {X Y : C} → (f : X ⟶ Y) → C\n  left_map : {X Y : C} → (f : X ⟶ Y) → X ⟶ image f\n  right_map : {X Y : C} → (f : X ⟶ Y) → image f ⟶ Y\n  factorization : {X Y : C} → (f : X ⟶ Y) → left_map f ≫ right_map f = f := by aesop_cat\n  iso :\n    {X Y : C} → (f : X ⟶ Y) → (im : C) → (left : X ⟶ im) → (right : im ⟶ Y) →\n    (fact : left ≫ right = f) →\n    Σ' i : image f ≅ im, left_map f ≫ i.hom = left ∧ i.hom ≫ right = right_map f\n  is_unique_iso :\n    {X Y : C} → (f : X ⟶ Y) → (im : C) → (left : X ⟶ im) → (right : im ⟶ Y) →\n    (fact : left ≫ right = f) → (i : image f ≅ im) → (comm₁ : left_map f ≫ i.hom = left) →\n    (comm₂ : i.hom ≫ right = right_map f) → i = (iso f im left right fact).fst\n\ndef MorphismPropertySlice (W : MorphismProperty C) (X : C) : MorphismProperty (Over X) := by\n  rintro _ _ f\n  exact W ((Over.forget X).map f)\n\nlemma contains_isos_slice : {W : MorphismProperty C} → {X : C} →  contains_isos W →\n    contains_isos (MorphismPropertySlice W X) := by\n  intro _ X h _ _ i\n  exact h (asIso ((Over.forget X).map i.hom))\n\nlemma is_closed_comp_slice {W : MorphismProperty C} {X : C} (h : is_closed_comp W) :\n    is_closed_comp (MorphismPropertySlice W X) where\n  precomp f hf g hg := by\n    unfold MorphismPropertySlice\n    rw [(Over.forget X).map_comp]\n    exact h.precomp _ hf _ hg\n  postcomp f hf g hg := by\n    unfold MorphismPropertySlice\n    rw [(Over.forget X).map_comp]\n    exact h.postcomp _ hf _ hg\n\nnamespace Over\n\nlemma forget_map_comm :\n    {X : C} → {p q r : Over X} → (F : p ⟶ q) → (G : q ⟶ r) → (H : p ⟶ r) →\n    (hyp : F ≫ G = H) → (F.left ≫ G.left = H.left) := by\n  rintro X _ _ _ ⟨f,_,u⟩ ⟨g,_,v⟩ ⟨h,_,w⟩ _\n  calc\n    f ≫ g = ((Over.forget X).map ⟨f,_,u⟩) ≫ ((Over.forget X).map ⟨g,_,v⟩) := by\n      simp\n    _ = ((Over.forget X).map (⟨f,_,u⟩ ≫ ⟨g,_,v⟩)) := by simp\n    _ = ((Over.forget X).map ⟨h,_,w⟩) := by aesop_cat\n    _ = h := by simp\n\ndef forget_preserves_isos : {X : C} → {f g : Over X} → (i : f ≅ g) → f.left ≅ g.left := by\n  rintro X _ _ i\n  exact\n  {\n    hom := by exact i.hom.left,\n    inv := by exact i.inv.left,\n    hom_inv_id := by exact forget_map_comm _ _ _ i.hom_inv_id,\n    inv_hom_id := by exact forget_map_comm _ _ _ i.inv_hom_id\n  }\n\nend Over\n\ndef FactorizationSystemSlice : {X : C} → {L R : MorphismProperty C} → FactorizationSystem L R →\n    FactorizationSystem (MorphismPropertySlice L X) (MorphismPropertySlice R X) := by\n  intro X L R F\n  exact\n  {\n    contains_isos_left_class := contains_isos_slice F.contains_isos_left_class,\n    contains_isos_right_class := contains_isos_slice F.contains_isos_right_class,\n    is_closed_comp_left_class := is_closed_comp_slice F.is_closed_comp_left_class,\n    is_closed_comp_right_class := is_closed_comp_slice F.is_closed_comp_right_class,\n    image := by\n      rintro _ ⟨_,_,b⟩ ⟨f,_,_⟩\n      apply Over.mk ((F.right_map f) ≫ b),\n    left_map := by\n      rintro ⟨_,_,a⟩ ⟨_,_,b⟩ ⟨f,_,w⟩\n      have comm : F.left_map f ≫ F.right_map f ≫ b = a := by\n        calc\n          F.left_map f ≫ F.right_map f ≫ b =\n          (F.left_map f ≫ F.right_map f) ≫ b := by simp\n          _ = f ≫ b := by exact (F.factorization f) =≫ b\n          _ = a := by simp at w ; exact w\n      exact Over.homMk (F.left_map f) comm,\n    right_map := by\n      rintro _ _ ⟨f,_,_⟩\n      exact Over.homMk (F.right_map f) (by aesop_cat),\n    factorization := by\n      rintro _ _ ⟨f,_,_⟩\n      have fact : (F.left_map f) ≫ (F.right_map f) = f := F.factorization f\n      aesop_cat,\n    iso := by\n      rintro ⟨_,_,a⟩ ⟨_,_,b⟩ ⟨g,_,u⟩ ⟨_,_,im⟩ ⟨l,_,v⟩ ⟨r,_,w⟩ fact\n      have ⟨i,⟨P,Q⟩⟩ := F.iso g _ l r (Over.forget_map_comm _ _ _ fact)\n      exact\n      {\n        fst := by\n          have comm : i.hom ≫ im = (F.right_map g) ≫ b := by\n            calc\n              i.hom ≫ im = i.hom ≫ r ≫ b := by simp at w ; rw [←w]\n              _ = (F.right_map g) ≫ b := by rw [←Q] ; simp\n          simp\n          apply Over.isoMk i (by simp ; exact comm)\n        snd := by aesop_cat\n      }\n    is_unique_iso := by\n      rintro ⟨A,_,a⟩ ⟨B,_,b⟩ ⟨g,_,u⟩ ⟨Im,_,im⟩ ⟨l,_,v⟩ ⟨r,_,w⟩\n      rintro fact i comm₁ comm₂\n      have duh := F.is_unique_iso g Im l r\n        (Over.forget_map_comm _ _ _ fact)\n        (Over.forget_preserves_isos i)\n        (Over.forget_map_comm _ _ _ comm₁)\n        (Over.forget_map_comm _ _ _ comm₂)\n      aesop_cat\n  }\n","languageId":"lean"},"dependencyBuildMode":"never"},"method":"textDocument/didOpen","jsonrpc":"2.0"}Content-Length: 38

{"result":null,"jsonrpc":"2.0","id":0}Content-Length: 38

{"result":null,"jsonrpc":"2.0","id":1}Content-Length: 38

{"result":null,"jsonrpc":"2.0","id":2}Content-Length: 33

{"method":"exit","jsonrpc":"2.0"}